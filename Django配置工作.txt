# Djano配置工作：
1. 配置好数据库；
2. 配置好模板文件的路径；
3. 配置好静态文件的路径；
4. 配置好时区；
5. 配置模板的static过滤器；

# 后端开发实战
## 关于用户系统：
1. 使用django内置的User系统；
2. 需要重新定制；
3. 前后台使用一个User系统。

## 自定义User模型：
1. 创建一个mysbauth的app，用来管理用户系统；
2. 全部重写，继承自AbstractBaseUser；
3. 定义UserManager；
4. 设置AUTH_USER_MODEL；
5. 映射到数据库中。

# django

# django-haystack插件：
这个插件是专门给django提供搜索功能，django-haystack提供了一个搜索的接口，底层可以根据自己的需求更换搜索引擎
他其实有点类似于Django中的ORM插件，提供了一个操作数据库的接口，但是底层具体使用哪个数据库是可以自己设置的，
可以通过pip install django-haystack安装。
支持的搜索引擎有Solr，whoosh，Xapian等，whoosh是基于Python的搜索引擎，检索速度非常快，集成方便，本项目就是用whoosh来作为haystack作为haystack的搜索引擎。
安装搜索引擎命令：pip install whoosh;
（1）并且需要将haystack加入settings.py文件中的安装的APP中；
（2）同时还需要设置一下搜索引擎；
（3）创建搜索引类；在模型所属的APP下创建一个search_indexes.py文件，然后创建索引类，比如要给Clothes创建索引

# 接着在templates文件夹创建search.html模板文件，haystack会自动在templates文件夹下寻找这个文件渲染，并且会给这个模板文件传入page，pageinator，query等参数，
其中，page和paginator分别是django内置的Page类和Pageinator类的对象，query是查询的关键字，我们可以通过page.object_list获取到查找出来的数据。
